// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // **INSTRUCTION HANDLING**
    // define whether the incoming instruction is A or C
    Not(in=instruction[15],out=AInstruction);
    Not(in=AInstruction, out=CInstruction);
    And(a=instruction[15], b=instruction[5], out=instructionloadA);

    //**A REGISTER**

    // we can also load A if it is a C instruction that specifies to store in A (d1(instruction[5]) = true)
    // if MSB is 0, still save to the A regsiter
    Or(a=AInstruction, b=instructionloadA, out=ARegisterLoad);

    ARegister(in=ARegisterIn, load=ARegisterLoad, out=ARegisterOut, out[0..14]=addressM);

    //**D Register**
    // If MSB is 1, and (d2(instruction[4]) = true, then load D Register)
    And(a=instruction[15], b=instruction[4], out=DRegisterLoad);

    DRegister(in=ALUout, load=DRegisterLoad, out=DRegisterOut);
    //D Register output feeds into ALU x input

    // if MSB (instruction[15]) is false (0) pass through ALU output
    // if true, pass through instruction with MSB cleared to provide A Register input
    Mux16(a=ALUout, b[15]=false, b[0..14]=instruction[0..14], sel=AInstruction, out=ARegisterIn);

    //**Mux 2**
    // if MSB and 'a' bit = true, then use M value, else use A value
    And(a=instruction[15], b=instruction[12], out=Mux2Load);

    Mux16(a=ARegisterOut, b=inM, sel=Mux2Load, out=Mux2Out);
    //Mux 2 output feeds into ALU y input

    //**ALU**
    // ALU uses instruction[6..11] to determine what computation to carry out

    ALU(x=DRegisterOut,
        y=Mux2Out,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=ALUout,
        out=outM,
        zr=zr,
        ng=ng);

    //**PROGRAM COUNTER**
    // PC determines which instruction to jump to based on the jump bits [0..2]
    And(a=instruction[2], b=true, out=j1);
    And(a=instruction[1], b=true, out=j2);
    And(a=instruction[0], b=true, out=j3);

    // if jump bits = 000 no jump, if jump bits != 000, manipulate PC load bits
    //  compare zr and ng outputs from ALU against jump bits
    Or(a=zr, b=ng, out=ALUout-LTE); // ALUout is LTE (less than or equal to)
    Not(in=ALUout-LTE, out=ALUout-GT); // ALUout is GT (greater than)

    // jump commands

    // JGT (jump on greater than) if ALUout > 0, j3 = 1
    And(a=j3, b=ALUout-GT, out=JGT);

    // JEQ (jump on equal) if ALUout = 0, j2 = 1
    And(a=j2, b=zr, out=JEQ);

    // JLT (jump on less than ) if ALUout < 0, j1 = 1
    And(a=j1, b=ng, out=JLT);

    // JLE (jump on less than or equal to), if JLT or JEQ = true
    Or(a=JEQ, b=JLT, out=JLE);

    // JMP (can jump), if JLE or JGT = true
    Or(a=JLE, b=JGT, out=JMP);

    //  if C instruction jump allowed, else increment (no jump)
    And(a=CInstruction, b=JMP, out=loadJMP);
    Not(in=loadJMP, out=noJMP);


    PC(in=ARegisterOut, load=loadJMP, inc=noJMP, reset=reset, out[0..14]=pc);

    //**WriteM**
    // If MSB is 1, and (d3(instruction[3]) = true, then write to M (writeM))
     And(a=instruction[15], b=instruction[3], out=writeM);
}
